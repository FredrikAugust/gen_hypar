#!/usr/bin/env escript
%% -*- erlang -*-
%%! -sname cmd -setcookie hypar -hidden

-export([connect_all/1]).

%% Start a cluster running over a port range inclusive of node test
%% They are connected with each other using 
main(["start-cluster", NStr]) ->
    N = erlang:list_to_integer(NStr),

    %% Construct the node-names
    NodeNames = [ "node"++erlang:integer_to_list(I) || I <- lists:seq(1, N)],

    %% Start all nodes
    StartPrefix = "erl -pa ebin/ deps/*/ebin/ -detached -setcookie hypar -sname ",
    [ os:cmd(StartPrefix ++ Node) || Node <- NodeNames],

    %% Create the full node name
    Nodes = [erlang:list_to_atom(NodeName++"@localhost") || NodeName <- NodeNames],

    %% Let nodes spin up before connecting them
    timer:sleep(1000),

    %% Connect to all nodes
    lists:foreach(fun net_kernel:connect/1, Nodes),

    %% Let the nodes propagate cluster info
    timer:sleep(1000),

    %% Check that all are started and connected.
    [begin
         pong = net_adm:ping(Node),
         rpc:cast(Node, hyparerl, start, [])
     end || Node <- Nodes],
    io:format("Cluster started!~n"),
            
    %% Let the hyparerl applications spin up
    timer:sleep(1000),

    %% Let all of them join each other
    Id = rpc:call(hd(Nodes), hyparerl, get_id, []),
    {_,[]} = rpc:multicall(tl(Nodes), hyparerl, join_cluster, [Id], 10000),
    io:format("All nodes has join the cluster!~n");
main(["start-cluster"|_]) ->
    usage(start_cluster);
main(["kill-cluster"]) ->
    kill_cluster();
main(["list-cluster"]) ->
    io:format(os:cmd("pgrep -lf 'setcookie hypar -sname node'"));
main(_) ->
        usage().

usage() ->
    io:format("usage: hyparcmd cmd options\n").
usage(start_cluster) ->
    io:format("usage: hyparcmd start-cluster startport stopport\n"++
                  "Command starts an erlang node on each port with name nodePORT@localhost\n"++
                  "It also connects them to each other via traditional erlang distribution.\n");
usage(list_cluster) ->
    io:format("usage: hyparcmd list-cluster\n");
usage(kill_cluster) ->
    io:format("usage: hyparcmd kill-cluster\n").

kill_cluster() ->
    os:cmd("pkill -f 'setcookie hypar -sname node'").

connect_all(Nodes) ->
    lists:foreach(fun(Node) -> net_kernel:connect_node(Node) end, Nodes).
